// voxblock.js
import { Delegate } from "{{ 'vendor.min.js' | asset_url }}";


const VoxBlock = (() => {
    const audio = new Audio();
    audio.addEventListener('loadstart', function(){console.log('loadstart')});
    audio.addEventListener('playing', function(){console.log('playing')});
    audio.addEventListener('ended', function(){
        console.log('ended');
        audio.currentButton.classList.remove('playing');
    });

    const wishlist = [];  // JSON object to keep track of the wishlist

    // Function to sync wishlist with the server
    const syncWishlist = () => {
        // Sync with the server
        fetch('/wishlist/sync', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ wishlist }),
        })
        .then(response => response.json())
        .then(data => {
            console.log('Wishlist synced:', data);
            // Sync with Klaviyo
            syncWishlistWithKlaviyo();
        })
        .catch(error => {
            console.error('Error syncing wishlist:', error);
        });
    };

    // Function to sync wishlist with Klaviyo
    const syncWishlistWithKlaviyo = () => {
        if (window._learnq) {
            window._learnq.push(['identify', {
                '$wishlist': wishlist  // Set the wishlist as a custom property
            }]);
            console.log('Wishlist synced with Klaviyo');
        } else {
            console.error('Klaviyo not initialized');
        }
    };

    // Initialize wishlist event delegation
    const initWishlistDelegate = (selector) => {
        const delegate = new Delegate(document.body);
        delegate.on('click', selector, (event, target) => {
            const productId = target.getAttribute('data-product-id');
            if (target.classList.contains('in-wishlist')) {
                // Remove from wishlist
                const index = wishlist.indexOf(productId);
                if (index > -1) wishlist.splice(index, 1);
                target.classList.remove('in-wishlist');
            } else {
                // Add to wishlist
                wishlist.push(productId);
                target.classList.add('in-wishlist');
            }

            syncWishlistWithKlaviyo();  // Sync the updated wishlist with the server and Klaviyo
            event.preventDefault();
        });
    };

    // Initialize audio playback delegation
    const initAudioDelegate = (selector) => {
        const delegate = new Delegate(document.body);
        delegate.on('click', selector, (event, target) => {
            const srcfile = target.getAttribute('data-mp3');
            audio.currentButton = target;
            if (!audio.src.includes(srcfile)) {
                audio.src = srcfile;
            }

            if (target.classList.contains('playing')) {
                target.classList.remove('playing');
                audio.pause();
            } else {
                document.querySelectorAll(selector).forEach(el => el.classList.remove('playing'));
                target.classList.add('playing');
                audio.play();
            }

            event.preventDefault();
        });
    };

    return {
        initAudioDelegate,
        initWishlistDelegate
    };
})();

export default VoxBlock;

document.addEventListener('DOMContentLoaded', function() {
    VoxBlock.initAudioDelegate('.bookpreview');  // Initialize audio playback
    VoxBlock.initWishlistDelegate('.wishlist');  // Initialize wishlist functionality
});
