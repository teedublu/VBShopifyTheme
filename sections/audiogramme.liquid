
<style>
#transcript {
    overflow-y: auto;
    position: relative;
    width: 100%;
    box-sizing: border-box;
    /* border: 1px solid #ccc; */
    font-size: 200%;
    scroll-behavior: smooth;
    background-color: #ff9d5726;
    border: 2px dashed #ff9d57;
    border-radius: 12px;
    color: #167176;
}

span.transcript-word {
  padding: 0px 5px 1px 5px;
  margin: 0px 4px;
  transform-origin: bottom;
}

.highlight {
    background-color: red;
    position: relative;
    color: white;
    border-radius: 6px;
    animation: bounce 0.5s ease;
}

@keyframes bounce {
  0%, 100% {
    transform: scale(1); /* Normal size */
  }
  50% {
    transform: scale(1.2); /* Scaled up by 20% */
  }
}

.container {
    display: grid;
    width: 100%;
    height: auto;
    grid-template-columns: 1fr 3fr;
}

.media-column {
    padding: 20px;
    display: flex;
    flex-direction: column;
    align-items: center;
}

.product-image {
    max-width: 100%;
    height: auto;
    border-radius: 8px;
}

.audio-player {
    width: 100%;
    margin-top: 20px;
}

.transcript-column {
    flex: 1;
    padding: 20px;
    background-color: #f8f8f8;
    overflow-y: auto;
    height: 100%;
}

@media (max-width: 1000px) {
    .container {
        grid-template-columns: 1fr;
    }

    .transcript-column {
        position: absolute;
        background-color: rgba(0, 0, 0, 0.7); /* Semi-transparent for subtitle effect */
        color: white;
        width: 100%;
        bottom: 0;
        padding: 10px;
        text-align: center;
        font-size: larger;
    }

    .media-column {
        position: relative;
        height: 75%; /* Adjust based on your preference */
    }
}


</style>
{% assign data = metaobject.transcript.value %}
{% assign data = data | parse_json %}
{% assign product = all_products[metaobject.system.handle] %}

<div {% render 'section-properties', tight: true %}>
  {%- if section.settings.subtitle != blank -%}
    <p class="subheading">{{ section.settings.subtitle | escape }}</p>
  {%- endif -%}
  {%- if section.settings.title != blank -%}
    <h2 class="h2">
      {{ section.settings.title }}
    </h2>
  {%- endif -%}
  <div class="section-stack">
    <div class="container">
      <div class="media-column">
          <div>
            {{ product | image_url: width: 200 | image_tag }}
          </div>
          <div>
            <audio id="audioPlayer" controls>
              <source src="{{ product.metafields.book.preview.value.url }}" type="audio/mp3">
              Your browser does not support the audio element.
            </audio>
          </div>
      </div>


      <div id="transcript" role="region" aria-label="Audio Transcript" tabindex="0">
        {% for result in data.results %}

          {% for alternative in result.alternatives %}
            {% assign transcript = alternative.transcript %}
            <p>
              {% for word in alternative.words %}
                {% assign start_time_formatted = word.startOffset | remove: 's' | plus: 0 | printf: "%.3f" %}
                {% assign end_time_formatted = word.endOffset | remove: 's' | plus: 0 | printf: "%.3f" %}
                <span class="transcript-word"
                      data-start="{{ start_time_formatted }}"
                      data-end="{{ end_time_formatted }}"
                      onkeypress="jumpToAudioOnKeyPress(event, '{{ start_time_formatted }}')"
                      aria-label="Word {{ word.word }} starts at {{ start_time_formatted }} seconds">
                  {{ word.word }}
                </span>

              {% endfor %}
            </p>
          {% endfor %}
        {% endfor %}
      </div>
    </div>
  </div>
</div>    

<script>
(function() {
    // Local references to DOM elements
    const audioPlayer = document.getElementById('audioPlayer');
    const transcriptDiv = document.getElementById('transcript');
    let timer = null;  // Reference for the interval timer

    // Precompute and setup words data
    function setupWords() {
        return Array.from(document.querySelectorAll('.transcript-word')).map(word => ({
            element: word,
            start: parseFloat(word.dataset.start),
            end: parseFloat(word.dataset.end)
        }));
    }

    // Update highlighting based on current audio time
    function updateHighlight(words) {
        const currentTime = audioPlayer.currentTime;
        words.forEach(word => {
            if (currentTime >= word.start && currentTime < word.end) {
                word.element.classList.add('highlight');
                adjustScroll(word.element);
            } else {
                word.element.classList.remove('highlight');
            }
        });
    }

    // Start interval timer for updating highlights
    function startTimer(words) {
        if (!timer) {
            timer = setInterval(() => updateHighlight(words), 100); // Update every 100 ms
        }
    }

    // Stop the interval timer
    function stopTimer() {
        if (timer) {
            clearInterval(timer);
            timer = null;
        }
    }

    // Adjust scroll to center highlighted word in viewport
    function adjustScroll(element) {
        const wordPos = element.offsetTop;
        const scrollPos = wordPos - transcriptDiv.offsetHeight / 2 + element.offsetHeight / 2;
        transcriptDiv.scrollTop = scrollPos;
    }

    // Jump to specific time in audio
    function jumpToAudio(startTime) {
        const timeInSeconds = parseFloat(startTime);
        audioPlayer.currentTime = timeInSeconds;
        audioPlayer.play();
    }

    // Setup event listeners for player and delegation
    function bindEvents(words) {
        audioPlayer.addEventListener('play', () => startTimer(words));
        audioPlayer.addEventListener('pause', stopTimer);
        audioPlayer.addEventListener('ended', stopTimer);

        // Delegate click events on the transcript container
        transcriptDiv.addEventListener('click', function(event) {
            const target = event.target;
            if (target.classList.contains('transcript-word')) {
                jumpToAudio(target.dataset.start);
            }
        });
    }

    // Initialize the module
    function init() {
        const words = setupWords();
        bindEvents(words);
    }

    init();
})();
</script>



{% schema %}
{
  "name": "Audio Transcription",
  "tag": "section",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Section Title"
    },
    {
      "type": "text",
      "id": "subtitle",
      "label": "Section Sub Title"
    }
  ],
  "presets": [
    {
      "name": "Audio Transcription",
      "settings": {
        "title": "Audio Transcription"
      }
    }
  ]
}

{% endschema %}

